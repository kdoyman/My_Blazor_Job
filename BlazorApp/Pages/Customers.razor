@page "/customers"
@using System.Net.Http
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication
@using Serilog

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager

<h1> ASP.NET Core BLAZOR CRUD demo for Customers</h1>
<hr />
<table width="100%" style="background:#05163D;color:honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            @if (showAddrow == true)
            {<h2> Edit Customer Details </h2>}
        </td>
        <td> </td>
        <td align="right">
            <BSButton OnClick="AddNewCustomer">Add New Customer</BSButton>
        </td>
        <td width="10"> </td>
    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>
<hr />
@if (showAddrow == true)
{
    <EditForm Model="@custObj" OnValidSubmit="@AddCustomer">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table class="form-group">
            <tr>
                <td>
                    <label for="CompanyName" class="control-label">Company Name</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.CompanyName" />
                </td>
                <td width="20"> </td>
                <td>
                    <label for="ContactName" class="control-label">Contact Name</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.ContactName" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="Address" class="control-label">Address</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.Address" />
                </td>
                <td width="20"> </td>
                <td>
                    <label for="City" class="control-label">City</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.City" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="Region" class="control-label">Region</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.Region" />
                </td>
                <td width="20"> </td>
                <td>
                    <label for="PostalCode" class="control-label">PostalCode</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.PostalCode" />
                </td>
            </tr>
            <tr>

                <td>
                    <label for="Country" class="control-label">Country</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.Country" />
                </td>
                <td width="20"> </td>
                <td>
                    <label for="Phone" class="control-label">Phone</label>
                </td>
                <td>
                    <input type="text" class="form-control" @bind="@custObj.Phone" />
                </td>
                <td width="20"> </td>
                <td>
                </td>
                <td>
                    <BSButton type="submit" Color="Color.Success" style="width:220px;">Save</BSButton>
                </td>
                <td>
                </td>
                <td>
                    <BSButton OnClick="AddNewCustomer" Color="Color.Danger" style="width:220px;">Cancel</BSButton>
                </td>
            </tr>
        </table>

    </EditForm>
}
<table width="100%" style="background:#0A2464;color:honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            <h2>Customer List</h2>
        </td>

    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

@if ((custs == null || custs.Count() == 0) && !IamSearching)
{
    <p><em>Loading...</em></p>

    <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" />
    <br />
    <form>Welcome to Blazor ! We are waiting to add your first <span style="color:blue">customer</span> !</form>
}
else
{
    <BSBasicForm IsInline="true">
        <BSFormGroup Class="mb-2 mr-sm-2 mb-sm-0">
            <BSLabel For="SearchCusto" Class="mr-sm-2">Search Customers:</BSLabel>
            <BSBasicInput InputType="InputType.Search" Name="searchbar" Id="SearchCusto" @bind-Value="@cust_to_search" />
        </BSFormGroup>
        <BSButton OnClick="Search_Fun">Search</BSButton>
    </BSBasicForm>
    if (IamSearching)
    {
        <h5>(To go back search void)</h5>
        <h3>Customers found in selected page [ @custcountl ] :</h3>        
    }

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th scope="col">CompanyName</th>
                <th scope="col">ContactName</th>
                <th scope="col">Address</th>
                <th scope="col">City</th>
                <th scope="col">Region</th>
                <th scope="col">PostalCode</th>
                <th scope="col">Country</th>
                <th scope="col">Phone</th>
            </tr>
        </thead>

        <tbody>
            @foreach (Customer cus in custs)
            {
                <tr>
                    <td>@cus.CompanyName</td>
                    <td>@cus.ContactName</td>
                    <td>@cus.Address</td>
                    <td>@cus.City</td>
                    <td>@cus.Region</td>
                    <td>@cus.PostalCode</td>
                    <td>@cus.Country</td>
                    <td>@cus.Phone</td>
                    <BSButton Color="Color.Info" @onclick="(async () => await EditCustomer(cus.Id))">Edit</BSButton>
                    <BSButton Color="Color.Danger" @onclick="(async () => await DeleteCustomer(cus.Id))">Delete</BSButton>

                </tr>
            }

        </tbody>

    </table>

    @if (active)
    {
        <BSPagination Alignment="Alignment.Right">
            <BSPaginationItem>
                <BSButton Color="Color.Light" OnClick="onclickfirst">First</BSButton>
            </BSPaginationItem>
            <BSPaginationItem>
                <BSButton Color="Color.Light" OnClick="onclickbw">&lt;&lt;</BSButton>
            </BSPaginationItem>
            <BSPaginationItem>
                <BSButton Color="Color.Light" OnClick="onclicknext">&gt;&gt;</BSButton>
            </BSPaginationItem>
            <BSPaginationItem>
                <BSButton Color="Color.Light" OnClick="onclicklast">Last</BSButton>
            </BSPaginationItem>
            <BSPaginationItem>
                <BSBasicInput Id="Pagenumber" InputType="InputType.Number" min="1" max="@MaxPage" PlaceHolder="@Pagenumber" @bind-Value="@Pagenumber" @onclick="@setpage" @onfocusout="@setpage" @onkeydown="@setpage" @onkeyup="@setpage" />
            </BSPaginationItem>
            <BSPaginationItem>
                <h2>of @MaxPage</h2>
            </BSPaginationItem>
        </BSPagination>
    }
    else
    {
        <BSPagination Alignment="Alignment.Right">
            <BSPaginationItem>
                <h3>Page @MaxPage of @MaxPage</h3>
            </BSPaginationItem>
        </BSPagination>
    }
    if (!IamSearching)
    {
        <form>
            <label for="CustomersPerPage">Choose the number of customers to be displayed per page:</label>
            <select id="CustomersPerPage" name="CustomersPerPage" @onchange="@DoStuff">
                <option value="five">5</option>
                <option value="ten">10</option>
                <option value="fifteen">15</option>
                <option value="twenty">20</option>
                <option value="max">All</option>
            </select>
        </form>
    }
    if (!IamSearching){ <h5>Total Customers Found: @custcountl</h5>}
}

@code {

    private static List<Customer> custs = new List<Customer>();
    string baseUrl = "https://localhost:44311/";
    Customer custObj = new Customer();

    string ids = "0";
    bool showAddrow = false;

    bool loadFailed;

    Customer SelectedCustomer = null;
    private static string cust_to_search_prive;
    public string cust_to_search { get { return cust_to_search_prive; } set { cust_to_search_prive = value; Search_Fun(); } }
    public int CustomersPerPage { get; set; } = 5;
    public int Pagenumber { get; set; } = 1;
    bool state = false;
    public static bool IamSearching = false;
    List<Customer> Customers_Found = new List<Customer>();
    int i = 0;

    private static long custcountl;
    private static bool active = true;
    public int MaxPage
    {
        get
        {
            if (Math.Ceiling((double)(custcountl) / CustomersPerPage) <= 1) { active = false; } else { active = true; }
            return Convert.ToInt32(Math.Ceiling(Convert.ToDouble(custcountl) / CustomersPerPage));
        }

    }

    void RowSelect(Customer c)
    {
        SelectedCustomer = c;
    }

    async Task DoStuff(ChangeEventArgs e)
    {
        switch (e.Value)
        {
            case "five": if (CustomersPerPage == 5) { break; } else { CustomersPerPage = 5; state = true; break; }
            case "ten": if (CustomersPerPage == 10) { break; } else { CustomersPerPage = 10; state = true; break; }
            case "fifteen": if (CustomersPerPage == 15) { break; } else { CustomersPerPage = 15; state = true; break; }
            case "twenty": if (CustomersPerPage == 20) { break; } else { CustomersPerPage = 20; state = true; break; }
            case "max": if (CustomersPerPage == custcountl) { break; } else { CustomersPerPage = Convert.ToInt32(custcountl); state = true; break; }
            default:
                break;
        }
        Console.WriteLine("It is definitely: " + CustomersPerPage + "customers per page");
        if (state)
        {
            Pagenumber = 1;
            await load();
        }
        else
        {
            NavigationManager.NavigateTo("customers");
        }
    }

    public async Task setpage()
    {

        Pagenumber = Pagenumber;

        await load();

    }

    protected async Task onclick(MouseEventArgs e)
    {

        await load();

    }

    protected async Task onclicklast(MouseEventArgs e)
    {
        Pagenumber = MaxPage;

        await load();

    }

    protected async Task onclickfirst(MouseEventArgs e)
    {
        Pagenumber = 1;

        await load();

    }

    protected async Task onclicknext(MouseEventArgs e)
    {
        if (Pagenumber != MaxPage)
        {
            Pagenumber = Pagenumber + 1;
            await load();

        }
    }

    protected async Task onclickbw(MouseEventArgs e)
    {
        if (Pagenumber != 1)
        {
            Pagenumber--;
            await load();
            //NavigationManager.NavigateTo("customers");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!IamSearching)
            {
                ids = "0";
                cust_to_search_prive = string.Empty;
                var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
                if (accessToken != null)
                {
                    if (Http.DefaultRequestHeaders.Authorization == null)
                    {
                        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                    }
                }

                await load();
            }
        }
        catch (Exception)
        {
            Log.Information("Failed to Initialize customers");
            throw;
        }

    }

    protected async Task load()
    {
        custcountl = await Http.GetJsonAsync<long>($"{baseUrl}api/customers/GetCount");
        if (IamSearching) { CustomersPerPage = Convert.ToInt32(custcountl); }
        if (Pagenumber > MaxPage && MaxPage != 0) { Pagenumber = MaxPage; }
        else if (Pagenumber < 1) { Pagenumber = 1; }
        custs = (await Http.GetJsonAsync<Customer[]>($"{baseUrl}api/customers/getall?pagenum={Pagenumber}&customersPerPage={CustomersPerPage}")).ToList();

    }

    public void Search_Fun()
    {

        if (cust_to_search != string.Empty && cust_to_search != null)
        {
            IamSearching = true;
            foreach (Customer cus in custs)
            {
                if (cus.CompanyName != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.CompanyName.Contains(cust_to_search))
                    {
                        Customers_Found.Add(cus);
                        i++;
                    }
                }
                if (cus.ContactName != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.ContactName.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Address != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Address.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Country != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Country.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.City != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.City.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Phone != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Phone.Contains(cust_to_search))
                    {
                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Region != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Region.Contains(cust_to_search))
                    {
                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.PostalCode != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.PostalCode.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
            }
            custcountl = Customers_Found.Count();
            custs = Customers_Found;

            NavigationManager.NavigateTo("customers", true);

        }
        else { IamSearching = false; NavigationManager.NavigateTo("customers", true); }
    }

    void AddNewCustomer()
    {
        ids = "0";
        if (showAddrow == false) { showAddrow = true; } else { showAddrow = false; }
        custObj = new Customer();
    }
    // Add New Customer Details Method
    protected async Task AddCustomer()
    {
        if (IamSearching)
        {
            var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
            if (accessToken != null)
            {
                if (Http.DefaultRequestHeaders.Authorization == null)
                {
                    Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                }
            }
        }

        if (ids == "0")

        {
            await Http.SendJsonAsync(HttpMethod.Post, $"{baseUrl}api/customers/", custObj);
            IamSearching = false;
            cust_to_search_prive = string.Empty;
            await load();
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, $"{baseUrl}api/customers/" + custObj.Id, custObj);
            IamSearching = false;
            cust_to_search_prive = string.Empty;
            await load();
        }

        showAddrow = false;
    }
    // Edit Method
    protected async Task EditCustomer(string CustomerID)
    {
        showAddrow = true;

        ids = "1";
        try
        {
            if (IamSearching)
            {
                var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
                if (accessToken != null)
                {
                    if (Http.DefaultRequestHeaders.Authorization == null)
                    {
                        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                    }
                }
                IamSearching = false;
                cust_to_search_prive = string.Empty;
            }
            loadFailed = false;
            ids = CustomerID.ToString();
            custObj = await Http.GetJsonAsync<Customer>
                ($"{baseUrl}api/customers/" + CustomerID);

            string s = custObj.Id;

            showAddrow = true;

        }
        catch (Exception ex)
        {
            loadFailed = true;
            Log.Fatal(ex, "Failed to edit customer {CustomerId}", CustomerID);

        }
    }
    // Delte Method
    protected async Task DeleteCustomer(string CustomerID)
    {
        showAddrow = false;
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (IamSearching)
        {
            var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
            if (accessToken != null)
            {
                if (Http.DefaultRequestHeaders.Authorization == null)
                {
                    Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                }
            }
        }
        if (confirmed)
        {
            ids = CustomerID.ToString();
            await Http.DeleteAsync($"{baseUrl}api/customers/" + CustomerID);
            IamSearching = false;
            cust_to_search_prive = string.Empty;
            await load();
        }
    }

}
