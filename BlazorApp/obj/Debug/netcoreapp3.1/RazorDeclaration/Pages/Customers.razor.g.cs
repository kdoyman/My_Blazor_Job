#pragma checksum "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\Pages\Customers.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fffa1753c295c83f63359f957b6161b959959eb1"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using BlazorApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using BlazorApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using CustomerLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\_Imports.razor"
using BlazorStrap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\Pages\Customers.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\Pages\Customers.razor"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\Pages\Customers.razor"
using Microsoft.AspNetCore.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\Pages\Customers.razor"
using Serilog;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/customers")]
    public partial class Customers : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 233 "C:\Users\koko\source\repos\New_MFJ\My_Future_Job\BlazorApp\Pages\Customers.razor"
       

    private static List<Customer> custs = new List<Customer>();
    string baseUrl = "https://localhost:44311/";
    Customer custObj = new Customer();

    string ids = "0";
    bool showAddrow = false;

    bool loadFailed;

    Customer SelectedCustomer = null;
    private static string cust_to_search_prive;
    public string cust_to_search { get { return cust_to_search_prive; } set { cust_to_search_prive = value; Search_Fun(); } }
    public int CustomersPerPage { get; set; } = 5;
    public int Pagenumber { get; set; } = 1;
    bool state = false;
    public static bool IamSearching = false;
    List<Customer> Customers_Found = new List<Customer>();
    int i = 0;

    private static long custcountl;
    private static bool active = true;
    public int MaxPage
    {
        get
        {
            if (Math.Ceiling((double)(custcountl) / CustomersPerPage) <= 1) { active = false; } else { active = true; }
            return Convert.ToInt32(Math.Ceiling(Convert.ToDouble(custcountl) / CustomersPerPage));
        }

    }

    void RowSelect(Customer c)
    {
        SelectedCustomer = c;
    }

    async Task DoStuff(ChangeEventArgs e)
    {
        switch (e.Value)
        {
            case "five": if (CustomersPerPage == 5) { break; } else { CustomersPerPage = 5; state = true; break; }
            case "ten": if (CustomersPerPage == 10) { break; } else { CustomersPerPage = 10; state = true; break; }
            case "fifteen": if (CustomersPerPage == 15) { break; } else { CustomersPerPage = 15; state = true; break; }
            case "twenty": if (CustomersPerPage == 20) { break; } else { CustomersPerPage = 20; state = true; break; }
            case "max": if (CustomersPerPage == custcountl) { break; } else { CustomersPerPage = Convert.ToInt32(custcountl); state = true; break; }
            default:
                break;
        }
        Console.WriteLine("It is definitely: " + CustomersPerPage + "customers per page");
        if (state)
        {
            Pagenumber = 1;
            await load();
        }
        else
        {
            NavigationManager.NavigateTo("customers");
        }
    }

    public async Task setpage()
    {

        Pagenumber = Pagenumber;

        await load();

    }

    protected async Task onclick(MouseEventArgs e)
    {

        await load();

    }

    protected async Task onclicklast(MouseEventArgs e)
    {
        Pagenumber = MaxPage;

        await load();

    }

    protected async Task onclickfirst(MouseEventArgs e)
    {
        Pagenumber = 1;

        await load();

    }

    protected async Task onclicknext(MouseEventArgs e)
    {
        if (Pagenumber != MaxPage)
        {
            Pagenumber = Pagenumber + 1;
            await load();

        }
    }

    protected async Task onclickbw(MouseEventArgs e)
    {
        if (Pagenumber != 1)
        {
            Pagenumber--;
            await load();
            //NavigationManager.NavigateTo("customers");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!IamSearching)
            {
                ids = "0";
                cust_to_search_prive = string.Empty;
                var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
                if (accessToken != null)
                {
                    if (Http.DefaultRequestHeaders.Authorization == null)
                    {
                        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                    }
                }

                await load();
            }
        }
        catch (Exception)
        {
            Log.Information("Failed to Initialize customers");
            throw;
        }

    }

    protected async Task load()
    {
        custcountl = await Http.GetJsonAsync<long>($"{baseUrl}api/customers/GetCount");
        if (IamSearching) { CustomersPerPage = Convert.ToInt32(custcountl); }
        if (Pagenumber > MaxPage && MaxPage != 0) { Pagenumber = MaxPage; }
        else if (Pagenumber < 1) { Pagenumber = 1; }
        custs = (await Http.GetJsonAsync<Customer[]>($"{baseUrl}api/customers/getall?pagenum={Pagenumber}&customersPerPage={CustomersPerPage}")).ToList();

    }

    public void Search_Fun()
    {

        if (cust_to_search != string.Empty && cust_to_search != null)
        {
            IamSearching = true;
            foreach (Customer cus in custs)
            {
                if (cus.CompanyName != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.CompanyName.Contains(cust_to_search))
                    {
                        Customers_Found.Add(cus);
                        i++;
                    }
                }
                if (cus.ContactName != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.ContactName.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Address != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Address.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Country != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Country.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.City != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.City.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Phone != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Phone.Contains(cust_to_search))
                    {
                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.Region != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.Region.Contains(cust_to_search))
                    {
                        Customers_Found.Add(cus);
                        i++;
                    }

                }
                if (cus.PostalCode != null)
                {
                    if (Customers_Found.Count != 0) { if (Customers_Found.Last().Id == cus.Id) { continue; } }
                    if (cus.PostalCode.Contains(cust_to_search))
                    {

                        Customers_Found.Add(cus);
                        i++;
                    }

                }
            }
            custcountl = Customers_Found.Count();
            custs = Customers_Found;

            NavigationManager.NavigateTo("customers", true);

        }
        else { IamSearching = false; NavigationManager.NavigateTo("customers", true); }
    }

    void AddNewCustomer()
    {
        ids = "0";
        if (showAddrow == false) { showAddrow = true; } else { showAddrow = false; }
        custObj = new Customer();
    }
    // Add New Customer Details Method
    protected async Task AddCustomer()
    {
        if (IamSearching)
        {
            var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
            if (accessToken != null)
            {
                if (Http.DefaultRequestHeaders.Authorization == null)
                {
                    Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                }
            }
        }

        if (ids == "0")

        {
            await Http.SendJsonAsync(HttpMethod.Post, $"{baseUrl}api/customers/", custObj);
            IamSearching = false;
            cust_to_search_prive = string.Empty;
            await load();
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, $"{baseUrl}api/customers/" + custObj.Id, custObj);
            IamSearching = false;
            cust_to_search_prive = string.Empty;
            await load();
        }

        showAddrow = false;
    }
    // Edit Method
    protected async Task EditCustomer(string CustomerID)
    {
        showAddrow = true;

        ids = "1";
        try
        {
            if (IamSearching)
            {
                var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
                if (accessToken != null)
                {
                    if (Http.DefaultRequestHeaders.Authorization == null)
                    {
                        Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                    }
                }
                IamSearching = false;
                cust_to_search_prive = string.Empty;
            }
            loadFailed = false;
            ids = CustomerID.ToString();
            custObj = await Http.GetJsonAsync<Customer>
                ($"{baseUrl}api/customers/" + CustomerID);

            string s = custObj.Id;

            showAddrow = true;

        }
        catch (Exception ex)
        {
            loadFailed = true;
            Log.Fatal(ex, "Failed to edit customer {CustomerId}", CustomerID);

        }
    }
    // Delte Method
    protected async Task DeleteCustomer(string CustomerID)
    {
        showAddrow = false;
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (IamSearching)
        {
            var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
            if (accessToken != null)
            {
                if (Http.DefaultRequestHeaders.Authorization == null)
                {
                    Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                }
            }
        }
        if (confirmed)
        {
            ids = CustomerID.ToString();
            await Http.DeleteAsync($"{baseUrl}api/customers/" + CustomerID);
            IamSearching = false;
            cust_to_search_prive = string.Empty;
            await load();
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpContextAccessor _httpContextAccessor { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
